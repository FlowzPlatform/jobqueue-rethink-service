'use strict';

var logger = require('./logger')(module);
var Promise = require('bluebird');
var is = require('./is');
var enums = require('./enums');

function getResultError(dbResult) {
  logger('getResultError', dbResult);
  var err = new Error(enums.message.dbError);
  err.dbError = dbResult;
  return Promise.reject(err);
}

function getJobsData(dbResult) {
  logger('getJobsData:', dbResult);
  return Promise.resolve().then(function () {
    if (!dbResult) {
      return [];
    }
    if (dbResult.errors > 0) {
      return getResultError(dbResult);
    }
    if (is.array(dbResult)) {
      return dbResult;
    }
    if (is.array(dbResult.changes)) {
      return dbResult.changes.map(function (change) {
        return change.new_val;
      });
    }
    if (dbResult.new_val) {
      return [dbResult.new_val];
    }
    if (dbResult.id) {
      return [dbResult];
    }
    return [];
  });
}

module.exports.toJob = function toJob(q, dbResult) {
  logger('toJob:', dbResult);
  return getJobsData(dbResult).then(function (jobsData) {
    return jobsData.map(function (jobData) {
      return q.createJob(jobData);
    });
  });
};

module.exports.toIds = function toIds(dbResult) {
  logger('toIds', dbResult);
  return getJobsData(dbResult).then(function (jobsData) {
    return jobsData.map(function (jobData) {
      return jobData.id;
    });
  });
};

module.exports.status = function status(dbResult, prop) {
  logger('status:', dbResult, prop);
  if (dbResult.errors > 0) {
    return getResultError(dbResult);
  }
  if (!dbResult[prop]) {
    dbResult[prop] = 0;
  }
  return Promise.resolve(dbResult[prop]);
};