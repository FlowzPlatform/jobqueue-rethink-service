'use strict';

var logger = require('./logger')(module);
var Promise = require('bluebird');
var enums = require('./enums');
var queueProcess = require('./queue-process');
var dbResult = require('./db-result');
var jobLog = require('./job-log');
var jobParse = require('./job-parse');

module.exports = function queueAddJob(q, job) {
  logger('addJob', job);
  return Promise.resolve().then(function () {
    return jobParse.job(job);
  }).map(function (oneJob) {
    if (oneJob.status === enums.status.created) {
      oneJob.status = enums.status.waiting;
    }
    var log = jobLog.createLogObject(oneJob, null, enums.message.jobAdded, enums.log.information, enums.status.waiting);
    oneJob.log.push(log);
    return oneJob.getCleanCopy();
  }).then(function (cleanJobs) {
    logger('cleanJobs', cleanJobs);
    return q.r.db(q.db).table(q.name).insert(cleanJobs, { returnChanges: true }).run(q.queryRunOptions);
  }).then(function (saveResult) {
    logger('saveResult', saveResult);
    queueProcess.restart(q);
    return dbResult.toJob(q, saveResult);
  }).then(function (savedJobs) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = savedJobs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var savedjob = _step.value;

        logger('Event: added [' + savedjob.id + ']');
        q.emit(enums.status.added, q.id, savedjob.id);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return savedJobs;
  });
};