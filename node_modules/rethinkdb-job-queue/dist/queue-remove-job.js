'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var logger = require('./logger')(module);
var Promise = require('bluebird');
var enums = require('./enums');
var jobParse = require('./job-parse');

module.exports = function removeJob(q, jobOrId) {
  logger('removeJob: ' + jobOrId);

  return Promise.resolve().then(function () {
    return jobParse.id(jobOrId);
  }).then(function (jobIds) {
    var _q$r$db$table;

    return Promise.props({
      jobIds: jobIds,
      removeResult: (_q$r$db$table = q.r.db(q.db).table(q.name)).getAll.apply(_q$r$db$table, _toConsumableArray(jobIds)).delete().run(q.queryRunOptions)
    });
  }).then(function (result) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = result.jobIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var id = _step.value;

        logger('Event: removed', q.id, id);
        q.emit(enums.status.removed, q.id, id);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result.jobIds;
  });
};