'use strict';

var logger = require('./logger')(module);
var Promise = require('bluebird');
var enums = require('./enums');

module.exports.createLogObject = createLogObject;
module.exports.commitLog = commitLog;
module.exports.getLastLog = getLastLog;

function createLogObject(job) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : enums.message.seeLogData;
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : enums.log.information;
  var status = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : job.status;

  logger('createLogObject', data, message, type, status);
  return {
    date: new Date(),
    queueId: job.q.id,
    message: message,
    data: data,
    type: type,
    status: status,
    retryCount: job.retryCount,
    processCount: job.processCount
  };
}

function commitLog(job) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : enums.message.seeLogData;
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : enums.log.information;
  var status = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : job.status;

  logger('commitLog', data, message, type, status);

  var newLog = createLogObject(job, data, message, type, status);

  if (job.status === enums.status.created) {
    return Promise.reject(new Error(enums.message.jobNotAdded));
  }
  return Promise.resolve().then(function () {
    return job.q.r.db(job.q.db).table(job.q.name).get(job.id).update({
      log: job.q.r.row('log').append(newLog),
      queueId: job.q.id
    });
  }).then(function (updateResult) {
    job.log.push(newLog);
    job.log.sort(compareTime);
    logger('Event: log', job.q.id, job.id);
    job.q.emit(enums.status.log, job.q.id, job.id);
    return true;
  });
}

function getLastLog(job) {
  job.log.sort(compareTime);
  return job.log.slice(-1)[0];
}

function compareTime(a, b) {
  return a.date.getTime() >= b.date.getTime() ? 1 : -1;
}