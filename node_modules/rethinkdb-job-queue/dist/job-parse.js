'use strict';

var logger = require('./logger')(module);
var is = require('./is');
var enums = require('./enums');

module.exports.id = function jobParseId(job) {
  logger('jobParseId', job);
  if (!job) {
    return [];
  }
  var jobs = is.array(job) ? job : [job];
  var validIds = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = jobs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var j = _step.value;

      if (!is.uuid(j) && !is.uuid(j.id)) {
        throw new Error(enums.message.idInvalid);
      }
      if (is.uuid(j)) {
        validIds.push(j);
      }
      if (is.uuid(j.id)) {
        validIds.push(j.id);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return validIds;
};

module.exports.job = function jobParseJob(job) {
  logger('jobParseJob', job);
  if (!job) {
    return [];
  }
  var jobs = is.array(job) ? job : [job];
  var validJobs = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = jobs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var j = _step2.value;

      var detail = false;
      if (!is.uuid(j.id)) {
        detail = 'Job id: ' + j.id;
      }
      if (!j.q) {
        detail = 'Job q missing';
      }
      if (!j.priority) {
        detail = 'Job priority missing';
      }
      if (j.timeout < 0) {
        detail = 'Job timeout: ' + j.timeout;
      }
      if (j.retryDelay < 0) {
        detail = 'Job retryDelay: ' + j.retryDelay;
      }
      if (j.retryMax < 0) {
        detail = 'Job retryMax: ' + j.retryMax;
      }
      if (j.retryCount < 0) {
        detail = 'Job retryCount: ' + j.retryCount;
      }
      if (!j.status) {
        detail = 'Job status missing';
      }
      if (!is.array(j.log)) {
        detail = 'Job log: ' + j.log;
      }
      if (!is.date(j.dateCreated)) {
        detail = 'Job dateCreated: ' + j.dateCreated;
      }
      if (!is.date(j.dateEnable)) {
        detail = 'Job dateEnable: ' + j.dateEnable;
      }
      if (j.progress < 0 || j.progress > 100) {
        detail = 'Job progress: ' + j.progress;
      }
      if (!j.queueId) {
        detail = 'Job queueId missing';
      }
      if (!detail) {
        validJobs.push(j);
      } else {
        throw new Error(enums.message.jobInvalid + ': ' + detail);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return validJobs;
};