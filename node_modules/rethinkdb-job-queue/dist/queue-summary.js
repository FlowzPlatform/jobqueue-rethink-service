'use strict';

var logger = require('./logger')(module);
var Promise = require('bluebird');

module.exports = function summary(q) {
  logger('summary');
  return Promise.resolve().then(function () {
    return q.r.db(q.db).table(q.name).group({ index: 'status' }).count();
  }).then(function (reduction) {
    var summary = {
      waiting: 0,
      active: 0,
      completed: 0,
      cancelled: 0,
      failed: 0,
      terminated: 0
    };
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = reduction[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var stat = _step.value;

        if (stat.group) {
          summary[stat.group] = stat.reduction;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    summary.total = Object.keys(summary).reduce(function (runningTotal, key) {
      return runningTotal + summary[key];
    }, 0);
    logger('summary', summary);
    return summary;
  });
};