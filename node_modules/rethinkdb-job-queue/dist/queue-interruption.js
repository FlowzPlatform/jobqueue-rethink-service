'use strict';

var logger = require('./logger')(module);
var Promise = require('bluebird');
var enums = require('./enums');
var is = require('./is');
var queueProcess = require('./queue-process');
var queueState = require('./queue-state');

module.exports.pause = function interruptionPause(q, source) {
  logger('pause', source);
  q._paused = true;
  var makeGlobal = is.true(source);
  var eventGlobal = makeGlobal || source === enums.state.global;
  return q.ready().then(function () {
    if (makeGlobal) {
      return queueState(q, enums.status.paused);
    }
  }).then(function () {
    return new Promise(function (resolve, reject) {
      logger('Event: pausing', q.id, eventGlobal);
      q.emit(enums.status.pausing, q.id, eventGlobal);
      if (q.running < 1) {
        return resolve();
      }
      var intId = setInterval(function pausing() {
        logger('Pausing, waiting on running jobs: [' + q.running + ']');
        if (q.running < 1) {
          clearInterval(intId);
          resolve();
        }
      }, 400);
    });
  }).then(function () {
    logger('Event: paused', q.id, eventGlobal);
    q.emit(enums.status.paused, q.id, eventGlobal);
    return true;
  });
};

module.exports.resume = function interruptionResume(q, source) {
  logger('resume', source);
  q._paused = false;
  var makeGlobal = is.true(source);
  var eventGlobal = makeGlobal || source === enums.state.global;
  return q.ready().then(function () {
    if (makeGlobal) {
      return queueState(q, enums.status.active);
    }
  }).then(function () {
    queueProcess.restart(q);
    logger('Event: resumed', q.id, eventGlobal);
    q.emit(enums.status.resumed, q.id, eventGlobal);
    return true;
  });
};