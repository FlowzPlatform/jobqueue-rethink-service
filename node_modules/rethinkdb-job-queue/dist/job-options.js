'use strict';

var logger = require('./logger')(module);
var enums = require('./enums');
var is = require('./is');

module.exports = function jobOptions() {
  var newOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var oldOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  logger('jobOptions', newOptions, oldOptions);

  var finalOptions = {};
  finalOptions.name = null;
  finalOptions.priority = enums.options.priority;
  finalOptions.timeout = enums.options.timeout;
  finalOptions.retryMax = enums.options.retryMax;
  finalOptions.retryDelay = enums.options.retryDelay;
  finalOptions.repeat = enums.options.repeat;
  finalOptions.repeatDelay = enums.options.repeatDelay;

  if (is.string(oldOptions.name)) {
    finalOptions.name = oldOptions.name;
  }

  if (Object.keys(enums.priority).includes(oldOptions.priority)) {
    finalOptions.priority = oldOptions.priority;
  }

  if (is.integer(oldOptions.timeout) && oldOptions.timeout >= 0) {
    finalOptions.timeout = oldOptions.timeout;
  }

  if (is.integer(oldOptions.retryMax) && oldOptions.retryMax >= 0) {
    finalOptions.retryMax = oldOptions.retryMax;
  }

  if (is.integer(oldOptions.retryDelay) && oldOptions.retryDelay >= 0) {
    finalOptions.retryDelay = oldOptions.retryDelay;
  }

  if (is.true(oldOptions.repeat) || is.false(oldOptions.repeat) || is.integer(oldOptions.repeat) && oldOptions.repeat >= 0) {
    finalOptions.repeat = oldOptions.repeat;
  }

  if (is.integer(oldOptions.repeatDelay) && oldOptions.repeatDelay >= 0) {
    finalOptions.repeatDelay = oldOptions.repeatDelay;
  }

  if (is.string(newOptions.name)) {
    finalOptions.name = newOptions.name;
  }

  if (Object.keys(enums.priority).includes(newOptions.priority)) {
    finalOptions.priority = newOptions.priority;
  }

  if (is.integer(newOptions.timeout) && newOptions.timeout >= 0) {
    finalOptions.timeout = newOptions.timeout;
  }

  if (is.integer(newOptions.retryMax) && newOptions.retryMax >= 0) {
    finalOptions.retryMax = newOptions.retryMax;
  }

  if (is.integer(newOptions.retryDelay) && newOptions.retryDelay >= 0) {
    finalOptions.retryDelay = newOptions.retryDelay;
  }

  if (is.true(newOptions.repeat) || is.false(newOptions.repeat) || is.integer(newOptions.repeat) && newOptions.repeat >= 0) {
    finalOptions.repeat = newOptions.repeat;
  }

  if (is.integer(newOptions.repeatDelay) && newOptions.repeatDelay >= 0) {
    finalOptions.repeatDelay = newOptions.repeatDelay;
  }

  return finalOptions;
};