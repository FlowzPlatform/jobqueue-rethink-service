'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var logger = require('./logger')(module);
var Promise = require('bluebird');
var enums = require('./enums');
var dbResult = require('./db-result');
var jobParse = require('./job-parse');
var jobLog = require('./job-log');

module.exports = function queueReanimateJob(q, jobOrId) {
  var dateEnable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();

  logger('queueGetJob: ', jobOrId);
  return Promise.resolve().then(function () {
    return jobParse.id(jobOrId);
  }).then(function (ids) {
    var _q$r$db$table;

    var log = jobLog.createLogObject({ q: q, retryCount: 0 }, null, enums.message.jobReanimated, enums.log.information, enums.status.waiting);
    return (_q$r$db$table = q.r.db(q.db).table(q.name)).getAll.apply(_q$r$db$table, _toConsumableArray(ids)).update({
      dateEnable: dateEnable,
      log: q.r.row('log').append(log),
      progress: 0,
      queueId: q.id,
      retryCount: 0,
      status: enums.status.waiting
    }, { returnChanges: true }).run(q.queryRunOptions);
  }).then(function (jobsResult) {
    logger('jobsResult', jobsResult);
    return dbResult.toIds(jobsResult);
  }).then(function (reanimatedJobIds) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = reanimatedJobIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var reanimatedJobId = _step.value;

        logger('Event: reanimated', q.id, reanimatedJobId);
        q.emit(enums.status.reanimated, q.id, reanimatedJobId);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return reanimatedJobIds;
  });
};