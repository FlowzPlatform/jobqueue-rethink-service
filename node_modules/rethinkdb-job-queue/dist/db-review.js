'use strict';

var logger = require('./logger')(module);
var Promise = require('bluebird');
var datetime = require('./datetime');
var dbResult = require('./db-result');
var queueProcess = require('./queue-process');
var queueState = require('./queue-state');
var is = require('./is');
var enums = require('./enums');
var dbReviewIntervalList = new Map();

function updateFailedJobs(q) {
  logger('updateFailedJobs: ' + datetime.format(new Date()));

  return Promise.resolve().then(function () {
    return q.r.db(q.db).table(q.name).orderBy({ index: enums.index.indexActiveDateEnable }).filter(q.r.row('dateEnable').lt(q.r.now())).update({
      status: q.r.branch(q.r.row('retryCount').lt(q.r.row('retryMax')), enums.status.failed, enums.status.terminated),
      dateFinished: q.r.now(),
      retryCount: q.r.branch(q.r.row('retryCount').lt(q.r.row('retryMax')), q.r.row('retryCount').add(1), q.r.row('retryCount')),
      log: q.r.row('log').append({
        date: q.r.now(),
        queueId: q.id,
        type: q.r.branch(q.r.row('retryCount').lt(q.r.row('retryMax')), enums.log.warning, enums.log.error),
        status: q.r.branch(q.r.row('retryCount').lt(q.r.row('retryMax')), enums.status.failed, enums.status.terminated),
        retryCount: q.r.row('retryCount'),
        processCount: q.r.row('processCount'),
        message: 'Master: ' + enums.message.failed,
        dateEnable: q.r.row('dateEnable')
      }),
      queueId: q.id
    }).run(q.queryRunOptions);
  }).then(function (updateResult) {
    logger('updateResult', updateResult);
    return dbResult.status(updateResult, enums.dbResult.replaced);
  });
}

function removeFinishedJobsBasedOnTime(q) {
  logger('removeFinishedJobsBasedOnTime');
  return q.r.db(q.db).table(q.name).orderBy({ index: enums.index.indexFinishedDateFinished }).filter(q.r.row('dateFinished').add(q.r.expr(q.removeFinishedJobs).div(1000)).lt(q.r.now())).delete().run(q.queryRunOptions);
}

function removeFinishedJobsBasedOnNow(q) {
  logger('removeFinishedJobsBasedOnNow');
  return q.r.db(q.db).table(q.name).orderBy({ index: enums.index.indexFinishedDateFinished }).filter(q.r.row('dateFinished').lt(q.r.now())).delete().run(q.queryRunOptions);
}

function removeFinishedJobs(q) {
  logger('removeFinishedJobs: ' + datetime.format(new Date()));

  if (q.removeFinishedJobs < 1 || q.removeFinishedJobs === false) {
    return Promise.resolve(0);
  }

  return Promise.resolve().then(function () {
    if (is.true(q.removeFinishedJobs)) {
      return removeFinishedJobsBasedOnNow(q);
    }
    return removeFinishedJobsBasedOnTime(q);
  }).then(function (deleteResult) {
    logger('deleteResult', deleteResult);
    return dbResult.status(deleteResult, enums.dbResult.deleted);
  });
}

function runReviewTasks(q) {
  logger('runReviewTasks');
  return Promise.props({
    reviewed: updateFailedJobs(q),
    removed: removeFinishedJobs(q)
  }).then(function (runReviewTasksResult) {
    runReviewTasksResult.local = true;
    logger('Event: reviewed', runReviewTasksResult);
    q.emit(enums.status.reviewed, q.id, runReviewTasksResult);
    queueProcess.restart(q);
    return Promise.props({
      queueStateChange: queueState(q, enums.status.reviewed),
      reviewResult: runReviewTasksResult
    });
  }).then(function (stateChangeAndReviewResult) {
    return stateChangeAndReviewResult.reviewResult;
  });
}

module.exports.enable = function enable(q) {
  logger('enable', q.masterInterval);
  if (!dbReviewIntervalList.has(q.id)) {
    var interval = q.masterInterval;
    dbReviewIntervalList.set(q.id, setInterval(function () {
      return runReviewTasks(q);
    }, interval));
  }
  return true;
};

module.exports.disable = function disable(q) {
  logger('disable', q.id);
  if (dbReviewIntervalList.has(q.id)) {
    clearInterval(dbReviewIntervalList.get(q.id));
    dbReviewIntervalList.delete(q.id);
  }
  return true;
};

module.exports.runOnce = function run(q) {
  logger('runOnce');
  return runReviewTasks(q);
};

module.exports.isEnabled = function reviewIsEnabled(q) {
  logger('isEnabled', q.id);
  return dbReviewIntervalList.has(q.id);
};