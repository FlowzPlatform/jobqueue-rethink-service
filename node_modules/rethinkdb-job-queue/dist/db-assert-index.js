'use strict';

var logger = require('./logger')(module);
var Promise = require('bluebird');
var enums = require('./enums');

function createIndexActiveDateEnable(q) {
  logger('createIndexActiveDateEnable');
  var indexName = enums.index.indexActiveDateEnable;
  return Promise.resolve().then(function () {
    return q.r.db(q.db).table(q.name).indexList().contains(indexName).run(q.queryRunOptions);
  }).then(function (exists) {
    if (exists) {
      return exists;
    }
    return q.r.db(q.db).table(q.name).indexCreate(indexName, function (row) {
      return q.r.branch(row('status').eq(enums.status.active), row('dateEnable'), null);
    }).run(q.queryRunOptions);
  });
}

function createIndexInactivePriorityDateCreated(q) {
  logger('createIndexInactivePriorityDateCreated');
  var indexName = enums.index.indexInactivePriorityDateCreated;
  return Promise.resolve().then(function () {
    return q.r.db(q.db).table(q.name).indexList().contains(indexName).run(q.queryRunOptions);
  }).then(function (exists) {
    if (exists) {
      return exists;
    }
    return q.r.db(q.db).table(q.name).indexCreate(indexName, function (row) {
      return q.r.branch(row('status').eq(enums.status.waiting), [row('priority'), row('dateEnable'), row('dateCreated')], row('status').eq(enums.status.failed), [row('priority'), row('dateEnable'), row('dateCreated')], null);
    }).run(q.queryRunOptions);
  });
}

function createIndexFinishedDateFinished(q) {
  logger('createIndexFinishedDateFinished');
  var indexName = enums.index.indexFinishedDateFinished;
  return Promise.resolve().then(function () {
    return q.r.db(q.db).table(q.name).indexList().contains(indexName).run(q.queryRunOptions);
  }).then(function (exists) {
    if (exists) {
      return exists;
    }
    return q.r.db(q.db).table(q.name).indexCreate(indexName, function (row) {
      return q.r.branch(row('status').eq(enums.status.completed), row('dateFinished'), row('status').eq(enums.status.cancelled), row('dateFinished'), row('status').eq(enums.status.terminated), row('dateFinished'), null);
    }).run(q.queryRunOptions);
  });
}

function createIndexName(q) {
  logger('createIndexName');
  var indexName = enums.index.indexName;
  return Promise.resolve().then(function () {
    return q.r.db(q.db).table(q.name).indexList().contains(indexName).run(q.queryRunOptions);
  }).then(function (exists) {
    if (exists) {
      return exists;
    }
    return q.r.db(q.db).table(q.name).indexCreate(indexName).run(q.queryRunOptions);
  });
}

function createIndexStatus(q) {
  logger('createIndexStatus');
  var indexName = enums.index.indexStatus;
  return Promise.resolve().then(function () {
    return q.r.db(q.db).table(q.name).indexList().contains(indexName).run(q.queryRunOptions);
  }).then(function (exists) {
    if (exists) {
      return exists;
    }
    return q.r.db(q.db).table(q.name).indexCreate(indexName).run(q.queryRunOptions);
  });
}

module.exports = function assertIndex(q) {
  logger('assertIndex');
  return Promise.all([createIndexActiveDateEnable(q), createIndexInactivePriorityDateCreated(q), createIndexFinishedDateFinished(q), createIndexName(q), createIndexStatus(q)]).then(function (indexCreateResult) {
    logger('Waiting for index...');
    return q.r.db(q.db).table(q.name).indexWait().run(q.queryRunOptions);
  }).then(function () {
    logger('Indexes ready.');
    return true;
  });
};